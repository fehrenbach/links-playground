# Code from ``Using Links to prototype a Database Wiki'' from DBPL'11
# http://homepages.inf.ed.ac.uk/slindley/papers/dbwiki-dbpl2011.pdf

var db = database "dbwiki";
var bindings = table "bindings" with (id : Int, row : Int, name : String, child : Int) where id readonly from db;

var intervals = table "intervals" with (id : Int, binding : Int, start : Int, end : Int) where id readonly from db;

var names = table "names" with (id : Int, binding : Int, name : String, start : Int) where id readonly from db;

var provenance = table "provenance" with (id : Int, fromtime : Int, frombinding : Int, totime : Int, tobinding : Int) where id readonly from db;

var pages = table "pages" with (id:Int, name:String, content:String, timestamp:Int) where id readonly from db;

typename BindingInfo = (binding:Int, row:Int);

sig lookup : ([String], (BindingInfo) {}-> [(|a::(Any,Base))]) ~> ((BindingInfo) {}-> [(|a::(Any,Base))])
fun lookup(path, q) {
  switch (path) {
    case [] -> q
    case label::path -> lookup(path,
                               fun ((binding=_, row=row)) {
                                 for (b <-- bindings)
                                 where (b.row == row && b.name == label)
                                   q((binding=b.id, row=b.child))
                               })
  }
}

sig lookupPath : ([String]) ~> Maybe(BindingInfo)
fun lookupPath(path) server {
  
  var q = lookup(reverse(path),
                 fun (bindInfo) {[bindInfo]});

  switch (query {q((binding=0, row=0))}) {
    case [v] -> Just(v)
    case _ -> Nothing
  }
}

lookupPath(["abc", "def", "ghi"])

## Attempt at doing the lookup in forward direction, not from the end.
## Doesn't work, because we can't use pattern matching "on the database".
## There should be a way around this, but I don't see it right now.
#
# fun lookupF(path, context) {
#   switch (path) {
#     case [] -> [context.row]
#     case label::path -> for (b <-- bindings)
#                         where (b.row == context.row && b.name == label)
#                           lookupF(path, (row=b.child))
#   }
# }

# query { for (root <-- bindings)
#         where (root.row == 0)
#           lookupF(["a", "b"], row=root.id) }


# Generated query for
# lookupPath(["abc", "def"])
# SELECT t1662."id" AS "binding",
#        t1662."child" AS "row"
#   FROM bindings AS t1661,
#        bindings AS t1662
#  WHERE t1661."row" = 0
#    AND t1661."name" = 'abc'
#    AND t1662."row" = t1661."child"
#    AND t1662."name" = 'def'


# Generated query for
# lookupPath(["abc", "def", "ghi"])
#
# SELECT t1663."id" AS "binding",
#        t1663."child" AS "row" 
#   FROM bindings AS t1661, 
#        bindings AS t1662, 
#        bindings AS t1663 
#  WHERE t1661."row" = 0 
#    AND t1661."name" = 'abc'
#    AND t1662."row" = t1661."child" 
#    AND t1662."name" = 'def' 
#    AND t1663."row" = t1662."child"
#    AND t1663."name" = 'ghi'


#   lookup(["c", "b", "a"], fun (bindInfo) {[(bindInfo)]})
# = lookup(["b", "a"],
#          fun ((binding=_, row=row)) {
#            for (b <-- bindings)
#            where (b.row == row && b.name == "c")
#              (fun (bindInfo) {[(bindInfo)]})((binding=b.id, row=b.child))
#          })
# = lookup(["a"],
#          fun ((binding=_, row=row)) {
#            for (b' <-- bindings)
#            where (b'.row == row && b'.name == "b")
#              (fun ((binding=_, row=row)) {
#                 for (b <-- bindings)
#                 where (b.row == row && b.name == "c")
#                  (fun (bindInfo) {[(bindInfo)]})((binding=b.id, row=b.child))
#               })((binding=b'.id, row=b'.child))
#           })
# = lookup([],
#          fun ((binding=_, row=row)) {
#            for (b'' <-- bindings)
#            where (b''.row == row && b''.name == "a")
#              (fun ((binding=_, row=row)) {
#                 for (b' <-- bindings)
#                 where (b'.row == row && b'.name == "b")
#                   (fun ((binding=_, row=row)) {
#                      for (b <-- bindings)
#                      where (b.row == row && b.name == "c")
#                       (fun (bindInfo) {[(bindInfo)]})((binding=b.id, row=b.child))
#                    })((binding=b'.id, row=b'.child))
#                })((binding=b''.id, row=b''.child))
#           })
# = fun ((binding=_, row=row)) {
#     for (b'' <-- bindings)
#     where (b''.row == row && b''.name == "a")
#        (fun ((binding=_, row=row)) {
#           for (b' <-- bindings)
#           where (b'.row == row && b'.name == "b")
#             (fun ((binding=_, row=row)) {
#                for (b <-- bindings)
#                where (b.row == row && b.name == "c")
#                 (fun (bindInfo) {[(bindInfo)]})((binding=b.id, row=b.child))
#              })((binding=b'.id, row=b'.child))
#          })((binding=b''.id, row=b''.child))
#    }
# = fun ((binding=_, row=row)) {
#     for (b'' <-- bindings)
#     where (b''.row == row && b''.name == "a")
#       for (b' <-- bindings)
#       where (b'.row == b''.child && b'.name == "b")
#         for (b <-- bindings)
#         where (b.row == b'.child && b.name == "c")
#           [(binding=b.id, row=b.child)]
#   }
# = fun ((binding=_, row=row)) {
#     for (b'' <-- bindings,
#          b' <-- bindings,
#          b <-- bindings)
#     where (b''.row == row && b''.name == "a"
#         && b'.row == b''.child && b'.name == "b"
#         && b.row == b'.child && b.name == "c")
#       [(binding=b.id, row=b.child)]
#   }


# apply this to (binding=0, row=0):

# for (b'' <-- bindings,
#      b' <-- bindings,
#      b <-- bindings)
# where (b''.row == 0 && b''.name == "a"
#     && b'.row == b''.child && b'.name == "b"
#     && b.row == b'.child && b.name == "c")
#   [(binding=b.id, row=b.child)]

# SELECT t1663."id" AS "binding",
#        t1663."child" AS "row" 
#   FROM bindings AS t1661, 
#        bindings AS t1662, 
#        bindings AS t1663 
#  WHERE t1661."row" = 0 
#    AND t1661."name" = 'abc'
#    AND t1662."row" = t1661."child" 
#    AND t1662."name" = 'def' 
#    AND t1663."row" = t1662."child"
#    AND t1663."name" = 'ghi'
